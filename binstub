#!/usr/bin/env bash

: ${BATS_TMPDIR:="/tmp"}
: ${BATS_MOCK_TMPDIR:="${BATS_TMPDIR}"}
: ${BATS_MOCK_BINDIR:="${BATS_MOCK_TMPDIR}/bin"}
: ${BATS_MOCK_ANY_ARG_SENTINEL:="__ANY__"}

readonly _ENCODED_BATS_MOCK_ANY_ARG_SENTINEL="$(echo -n "${BATS_MOCK_ANY_ARG_SENTINEL}" | base64)"


function clean_json_input {
    local input_file=${1}
    cat "${input_file}" | base64 --wrap=0
}

function save_error {
    local stub_run_error_file=${1}
    local error_message=${2}
    local expected_arg_file=${3}
    local actual_arg_file=${4}

    jq . > "${stub_run_error_file}" <<EOF
{
    "message": "${error_message}",
    "expected": "$(clean_json_input "${expected_arg_file}")",
    "actual": "$(clean_json_input "${actual_arg_file}")"
}
EOF
}

function is_call_more_than_planned {
    local stub_index=${1}
    local stub_plan_file=${2}

    [[ "${stub_index}" -ge "$(wc -l < "${stub_plan_file}")" ]]
}

function decode_plan_line {
    for arg in "${@}"; do
        echo -n "$(echo -n "${arg}" | base64 -d) "
    done
}

function check_plan_and_update_run_results {
    local stub_plan_file=${1}
    local stub_run_index_file=${2}
    local stub_run_error_file=${3}
    local stub_index="$(cat "${stub_run_index_file}")"

    if is_call_more_than_planned "${stub_index}" "${stub_plan_file}"; then
        save_error \
            "${stub_run_error_file}" \
            "more calls than expected to mock '$(basename "${BASH_SOURCE[0]}")'" \
            <(wc -l < "${stub_plan_file}") \
            <(echo "$((stub_index+1))")

        return
    fi

    local command_plan=$(sed -n "$((stub_index+1))p" "${stub_plan_file}")
    local expected_arguments=
    local run_command=
    local accumulating="expected_arguments"

    for a in ${command_plan}; do
        if [[ "${a}" == : ]]; then
            accumulating="run_command"
        else
            typeset ${accumulating}="${!accumulating} ${a}"
        fi
    done

    if [[ -n "${run_command:+_}" ]]; then
        local expected_arguments=(${expected_arguments:-})
        local actual_arguments=($(
            for a in "${@:4}"; do
                if [[ -z "${a}" ]] || grep -Eq "[[:space:]]" <(echo -n "${a}"); then
                    echo "$(echo -n "'${a}'" | base64 --wrap=0)"
                else
                    echo "$(echo -n "${a}" | base64 --wrap=0)"
                fi
            done
        ))

        if [[ "${#actual_arguments[@]}" != "${#expected_arguments[@]}" ]]; then
            save_error \
                "${stub_run_error_file}" \
                "wrong number of expected args (${#expected_arguments[@]} != actual ${#actual_arguments[@]}) for call ${stub_index} to mock '$(basename "${BASH_SOURCE[0]}")'" \
                <(decode_plan_line "${expected_arguments[@]}") \
                <(decode_plan_line "${actual_arguments[@]}")

            return
        fi

        for (( i=0; i<${#actual_arguments[@]}; i++ )); do
            local expected="${expected_arguments[$i]}"
            local actual="${actual_arguments[$i]}"

            if [[ "${expected}" == "${_ENCODED_BATS_MOCK_ANY_ARG_SENTINEL}" ]]; then
                continue
            fi

            if [[ "${expected}" != "${actual}" ]]; then
                save_error \
                    "${stub_run_error_file}" \
                    "incorrect arg ${i} for call ${stub_index} to mock '$(basename "${BASH_SOURCE[0]}")'" \
                    <(decode_plan_line "${expected_arguments[@]}") \
                    <(decode_plan_line "${actual_arguments[@]}")

                return
            fi
        done
    else
        run_command="${expected_arguments}"
    fi

    echo "$((stub_index+1))" > "${stub_run_index_file}"

    if [[ -z "${run_command}" ]]; then
        ( true )
    else
        local decoded_run_command="$(decode_plan_line ${run_command})"
        ( eval "${decoded_run_command}" )
    fi
}

function main {
    local program="$(basename "${BASH_SOURCE[0]}")"
    local stub_plan_file="${BATS_MOCK_TMPDIR}/${program}-stub-plan"
    local stub_run_index_file="${BATS_MOCK_TMPDIR}/${program}-stub-run-index"
    local stub_run_error_file="${BATS_MOCK_TMPDIR}/${program}-stub-run-errors"

    if [[ -f "${stub_run_error_file}" ]]; then
        return
    fi

    check_plan_and_update_run_results \
        "${stub_plan_file}" \
        "${stub_run_index_file}" \
        "${stub_run_error_file}" \
        "${@}"
}

set -euo pipefail
main "${@}"
